// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KhanSufiyanMirza/mini-aspire-API/db (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/KhanSufiyanMirza/mini-aspire-API/db"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateBorrower mocks base method.
func (m *MockStore) CreateBorrower(arg0 context.Context, arg1 db.CreateBorrowerParams) (db.Borrower, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBorrower", arg0, arg1)
	ret0, _ := ret[0].(db.Borrower)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBorrower indicates an expected call of CreateBorrower.
func (mr *MockStoreMockRecorder) CreateBorrower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBorrower", reflect.TypeOf((*MockStore)(nil).CreateBorrower), arg0, arg1)
}

// CreateLoan mocks base method.
func (m *MockStore) CreateLoan(arg0 context.Context, arg1 db.CreateLoanParams) (db.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoan", arg0, arg1)
	ret0, _ := ret[0].(db.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoan indicates an expected call of CreateLoan.
func (mr *MockStoreMockRecorder) CreateLoan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoan", reflect.TypeOf((*MockStore)(nil).CreateLoan), arg0, arg1)
}

// CreateLoanWithBorrower mocks base method.
func (m *MockStore) CreateLoanWithBorrower(arg0 context.Context, arg1 db.CreateLoanParams) (db.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoanWithBorrower", arg0, arg1)
	ret0, _ := ret[0].(db.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoanWithBorrower indicates an expected call of CreateLoanWithBorrower.
func (mr *MockStoreMockRecorder) CreateLoanWithBorrower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoanWithBorrower", reflect.TypeOf((*MockStore)(nil).CreateLoanWithBorrower), arg0, arg1)
}

// CreatePayment mocks base method.
func (m *MockStore) CreatePayment(arg0 context.Context, arg1 db.CreatePaymentParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockStoreMockRecorder) CreatePayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockStore)(nil).CreatePayment), arg0, arg1)
}

// CreatePaymentTerms mocks base method.
func (m *MockStore) CreatePaymentTerms(arg0 context.Context, arg1 db.CreatePaymentParams) (db.TransactionDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentTerms", arg0, arg1)
	ret0, _ := ret[0].(db.TransactionDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentTerms indicates an expected call of CreatePaymentTerms.
func (mr *MockStoreMockRecorder) CreatePaymentTerms(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentTerms", reflect.TypeOf((*MockStore)(nil).CreatePaymentTerms), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteBorrower mocks base method.
func (m *MockStore) DeleteBorrower(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBorrower", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBorrower indicates an expected call of DeleteBorrower.
func (mr *MockStoreMockRecorder) DeleteBorrower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBorrower", reflect.TypeOf((*MockStore)(nil).DeleteBorrower), arg0, arg1)
}

// DeleteLoan mocks base method.
func (m *MockStore) DeleteLoan(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoan", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoan indicates an expected call of DeleteLoan.
func (mr *MockStoreMockRecorder) DeleteLoan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoan", reflect.TypeOf((*MockStore)(nil).DeleteLoan), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetBorrower mocks base method.
func (m *MockStore) GetBorrower(arg0 context.Context, arg1 int64) (db.Borrower, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBorrower", arg0, arg1)
	ret0, _ := ret[0].(db.Borrower)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBorrower indicates an expected call of GetBorrower.
func (mr *MockStoreMockRecorder) GetBorrower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBorrower", reflect.TypeOf((*MockStore)(nil).GetBorrower), arg0, arg1)
}

// GetBorrowerByUserIdAndLoanId mocks base method.
func (m *MockStore) GetBorrowerByUserIdAndLoanId(arg0 context.Context, arg1 db.GetBorrowerByUserIdAndLoanIdParams) (db.Borrower, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBorrowerByUserIdAndLoanId", arg0, arg1)
	ret0, _ := ret[0].(db.Borrower)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBorrowerByUserIdAndLoanId indicates an expected call of GetBorrowerByUserIdAndLoanId.
func (mr *MockStoreMockRecorder) GetBorrowerByUserIdAndLoanId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBorrowerByUserIdAndLoanId", reflect.TypeOf((*MockStore)(nil).GetBorrowerByUserIdAndLoanId), arg0, arg1)
}

// GetLoan mocks base method.
func (m *MockStore) GetLoan(arg0 context.Context, arg1 int64) (db.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoan", arg0, arg1)
	ret0, _ := ret[0].(db.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoan indicates an expected call of GetLoan.
func (mr *MockStoreMockRecorder) GetLoan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoan", reflect.TypeOf((*MockStore)(nil).GetLoan), arg0, arg1)
}

// GetPayment mocks base method.
func (m *MockStore) GetPayment(arg0 context.Context, arg1 int64) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayment", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayment indicates an expected call of GetPayment.
func (mr *MockStoreMockRecorder) GetPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayment", reflect.TypeOf((*MockStore)(nil).GetPayment), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// ListBorrower mocks base method.
func (m *MockStore) ListBorrower(arg0 context.Context, arg1 db.ListBorrowerParams) ([]db.Borrower, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBorrower", arg0, arg1)
	ret0, _ := ret[0].([]db.Borrower)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBorrower indicates an expected call of ListBorrower.
func (mr *MockStoreMockRecorder) ListBorrower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBorrower", reflect.TypeOf((*MockStore)(nil).ListBorrower), arg0, arg1)
}

// ListDescBorrower mocks base method.
func (m *MockStore) ListDescBorrower(arg0 context.Context, arg1 db.ListDescBorrowerParams) ([]db.Borrower, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDescBorrower", arg0, arg1)
	ret0, _ := ret[0].([]db.Borrower)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDescBorrower indicates an expected call of ListDescBorrower.
func (mr *MockStoreMockRecorder) ListDescBorrower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDescBorrower", reflect.TypeOf((*MockStore)(nil).ListDescBorrower), arg0, arg1)
}

// ListDescLoan mocks base method.
func (m *MockStore) ListDescLoan(arg0 context.Context, arg1 db.ListDescLoanParams) ([]db.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDescLoan", arg0, arg1)
	ret0, _ := ret[0].([]db.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDescLoan indicates an expected call of ListDescLoan.
func (mr *MockStoreMockRecorder) ListDescLoan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDescLoan", reflect.TypeOf((*MockStore)(nil).ListDescLoan), arg0, arg1)
}

// ListDescPayment mocks base method.
func (m *MockStore) ListDescPayment(arg0 context.Context, arg1 db.ListDescPaymentParams) ([]db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDescPayment", arg0, arg1)
	ret0, _ := ret[0].([]db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDescPayment indicates an expected call of ListDescPayment.
func (mr *MockStoreMockRecorder) ListDescPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDescPayment", reflect.TypeOf((*MockStore)(nil).ListDescPayment), arg0, arg1)
}

// ListDescUser mocks base method.
func (m *MockStore) ListDescUser(arg0 context.Context, arg1 db.ListDescUserParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDescUser", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDescUser indicates an expected call of ListDescUser.
func (mr *MockStoreMockRecorder) ListDescUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDescUser", reflect.TypeOf((*MockStore)(nil).ListDescUser), arg0, arg1)
}

// ListLoan mocks base method.
func (m *MockStore) ListLoan(arg0 context.Context, arg1 db.ListLoanParams) ([]db.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoan", arg0, arg1)
	ret0, _ := ret[0].([]db.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoan indicates an expected call of ListLoan.
func (mr *MockStoreMockRecorder) ListLoan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoan", reflect.TypeOf((*MockStore)(nil).ListLoan), arg0, arg1)
}

// ListPayment mocks base method.
func (m *MockStore) ListPayment(arg0 context.Context, arg1 db.ListPaymentParams) ([]db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPayment", arg0, arg1)
	ret0, _ := ret[0].([]db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPayment indicates an expected call of ListPayment.
func (mr *MockStoreMockRecorder) ListPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPayment", reflect.TypeOf((*MockStore)(nil).ListPayment), arg0, arg1)
}

// ListUser mocks base method.
func (m *MockStore) ListUser(arg0 context.Context, arg1 db.ListUserParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUser", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUser indicates an expected call of ListUser.
func (mr *MockStoreMockRecorder) ListUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUser", reflect.TypeOf((*MockStore)(nil).ListUser), arg0, arg1)
}

// UpdateBorrower mocks base method.
func (m *MockStore) UpdateBorrower(arg0 context.Context, arg1 db.UpdateBorrowerParams) (db.Borrower, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBorrower", arg0, arg1)
	ret0, _ := ret[0].(db.Borrower)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBorrower indicates an expected call of UpdateBorrower.
func (mr *MockStoreMockRecorder) UpdateBorrower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBorrower", reflect.TypeOf((*MockStore)(nil).UpdateBorrower), arg0, arg1)
}

// UpdateLoan mocks base method.
func (m *MockStore) UpdateLoan(arg0 context.Context, arg1 db.UpdateLoanParams) (db.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoan", arg0, arg1)
	ret0, _ := ret[0].(db.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoan indicates an expected call of UpdateLoan.
func (mr *MockStoreMockRecorder) UpdateLoan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoan", reflect.TypeOf((*MockStore)(nil).UpdateLoan), arg0, arg1)
}

// UpdateLoanStatus mocks base method.
func (m *MockStore) UpdateLoanStatus(arg0 context.Context, arg1 db.UpdateLoanStatusParams) (db.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoanStatus", arg0, arg1)
	ret0, _ := ret[0].(db.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoanStatus indicates an expected call of UpdateLoanStatus.
func (mr *MockStoreMockRecorder) UpdateLoanStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoanStatus", reflect.TypeOf((*MockStore)(nil).UpdateLoanStatus), arg0, arg1)
}

// UpdatePayment mocks base method.
func (m *MockStore) UpdatePayment(arg0 context.Context, arg1 db.UpdatePaymentParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayment", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePayment indicates an expected call of UpdatePayment.
func (mr *MockStoreMockRecorder) UpdatePayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayment", reflect.TypeOf((*MockStore)(nil).UpdatePayment), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
